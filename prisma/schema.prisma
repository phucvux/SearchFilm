generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  user_id        Int      @id @default(autoincrement())
  username       String   @unique
  password       String
  email          String   @unique
  full_name      String?
  avatar_url     String?
  role           String   @default("user")
  google_id      String?  @unique
  facebook_id    String?  @unique
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())
  ratings        ratings[]
  comments       comments[]
  notifications  notifications[]
  watch_history  watch_history[]
  permissions    permissions[]
  activity_logs  activity_logs[]
  categories     categories[]
  blogs          blogs[]
  blog_comments  blog_comments[]
}

model movies {
  movie_id         Int             @id @default(autoincrement())
  name             String
  origin_name      String?
  content          String?
  type             String          @default("single")
  status           String?
  thumb_url        String?
  trailer_url      String?
  duration         String?
  episode_current  String?
  episode_total    String?
  quality          String?
  lang             String?
  notify           String?
  showtimes        String?
  slug             String          @unique
  year             Int?
  view             Int             @default(0)
  is_copyright     Boolean         @default(false)
  chieurap         Boolean         @default(false)
  poster_url       String?
  sub_docquyen     Boolean         @default(false)
  created_at       DateTime        @default(now())
  updated_at       DateTime        @default(now())
  episodes         episodes[]
  movie_genres     movie_genres[]
  movie_countries  movie_countries[]
  movie_actors     movie_actors[]
  movie_directors  movie_directors[]
  ratings          ratings[]
  comments         comments[]
  blogs            blogs[]
  watch_history    watch_history[]
  category_movies  category_movies[]
}

model episodes {
  episode_id    Int      @id @default(autoincrement())
  movie_id      Int
  server_name   String?
  name          String?
  slug          String?  @unique
  filename      String?
  link_film     String?
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  movie         movies   @relation(fields: [movie_id], references: [movie_id])
}

model genres {
  genre_id     Int            @id @default(autoincrement())
  name         String         @unique
  slug         String?        @unique
  movie_genres movie_genres[]
}

model movie_genres {
  movie_id Int
  genre_id Int
  movie    movies @relation(fields: [movie_id], references: [movie_id])
  genre    genres @relation(fields: [genre_id], references: [genre_id])
  @@id([movie_id, genre_id])
}

model countries {
  country_id      Int             @id @default(autoincrement())
  name            String          @unique
  slug            String?         @unique
  movie_countries movie_countries[]
}

model movie_countries {
  movie_id   Int
  country_id Int
  movie      movies    @relation(fields: [movie_id], references: [movie_id])
  country    countries @relation(fields: [country_id], references: [country_id])
  @@id([movie_id, country_id])
}

model actors {
  actor_id    Int            @id @default(autoincrement())
  name        String
  movie_actors movie_actors[]
}

model movie_actors {
  movie_id Int
  actor_id Int
  movie    movies @relation(fields: [movie_id], references: [movie_id])
  actor    actors @relation(fields: [actor_id], references: [actor_id])
  @@id([movie_id, actor_id])
}

model directors {
  director_id    Int               @id @default(autoincrement())
  name           String
  movie_directors movie_directors[]
}

model movie_directors {
  movie_id    Int
  director_id Int
  movie       movies    @relation(fields: [movie_id], references: [movie_id])
  director    directors @relation(fields: [director_id], references: [director_id])
  @@id([movie_id, director_id])
}

model ratings {
  rating_id  Int      @id @default(autoincrement())
  movie_id   Int
  user_id    Int
  score      Int
  review     String?
  created_at DateTime @default(now())
  movie      movies   @relation(fields: [movie_id], references: [movie_id])
  user       users    @relation(fields: [user_id], references: [user_id])
}

model comments {
  comment_id        Int      @id @default(autoincrement())
  movie_id          Int
  user_id           Int
  content           String
  parent_comment_id Int?
  created_at        DateTime @default(now())
  movie             movies   @relation(fields: [movie_id], references: [movie_id])
  user              users    @relation(fields: [user_id], references: [user_id])
  parent_comment    comments? @relation("CommentToComment", fields: [parent_comment_id], references: [comment_id])
  replies           comments[] @relation("CommentToComment")
}

model notifications {
  notification_id Int      @id @default(autoincrement())
  user_id         Int
  message         String
  read            Boolean  @default(false)
  created_at      DateTime @default(now())
  user            users    @relation(fields: [user_id], references: [user_id])
}

model advertisements {
  ad_id      Int      @id @default(autoincrement())
  title      String
  content    String?
  image_url  String?
  target_url String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model watch_history {
  history_id  Int      @id @default(autoincrement())
  user_id     Int
  movie_id    Int
  watched_at  DateTime @default(now())
  user        users    @relation(fields: [user_id], references: [user_id])
  movie       movies   @relation(fields: [movie_id], references: [movie_id])
}

model permissions {
  permission_id Int      @id @default(autoincrement())
  user_id       Int
  permission    String
  created_at    DateTime @default(now())
  user          users    @relation(fields: [user_id], references: [user_id])
}

model activity_logs {
  log_id     Int      @id @default(autoincrement())
  user_id    Int
  action     String
  created_at DateTime @default(now())
  user       users    @relation(fields: [user_id], references: [user_id])
}

model categories {
  category_id     Int               @id @default(autoincrement())
  user_id         Int
  name            String
  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now())
  user            users             @relation(fields: [user_id], references: [user_id])
  category_movies category_movies[]
}

model category_movies {
  category_id Int
  movie_id    Int
  category    categories @relation(fields: [category_id], references: [category_id])
  movie       movies     @relation(fields: [movie_id], references: [movie_id])
  @@id([category_id, movie_id])
}

model blogs {
  blog_id      Int      @id @default(autoincrement())
  user_id      Int
  title        String
  content      String
  movie_id     Int?
  image_url    String?
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())
  user         users    @relation(fields: [user_id], references: [user_id])
  movie        movies?  @relation(fields: [movie_id], references: [movie_id])
  blog_comments blog_comments[]
}

model blog_comments {
  comment_id        Int            @id @default(autoincrement())
  blog_id           Int
  user_id           Int
  content           String
  parent_comment_id Int?
  created_at        DateTime       @default(now())
  blog              blogs          @relation(fields: [blog_id], references: [blog_id])
  user              users          @relation(fields: [user_id], references: [user_id])
  parent_comment    blog_comments? @relation("BlogCommentToBlogComment", fields: [parent_comment_id], references: [comment_id])
  replies           blog_comments[] @relation("BlogCommentToBlogComment")
}
